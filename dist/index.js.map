{"version":3,"file":"index.js","sources":["../src/elements/entityEventNotification/IEntityEventNotificationReadDto.ts","../src/elements/entityPermission/EntityStaticPermissionEnum.ts","../src/elements/event/IEventReadDto.ts","../src/elements/field/IFieldReadDto.ts","../src/elements/message/IMessageReadDto.ts","../src/elements/model/IModelReadDto.ts","../src/elements/modelState/IModelStateReadDto.ts","../src/elements/post/IPostReadDto.ts","../src/elements/reaction/IReactionReadDto.ts","../src/elements/role/PermissionEnum.ts","../src/elements/user/IUserReadDto.ts","../src/elements/order/OrderPaymentStatusEnum.ts","../src/elements/paymentMethod/PaymentMethodEnum.ts","../src/elements/notification/INotificationReadDto.ts"],"sourcesContent":["import { ITranslatedText } from \"../../globalTypes/ITranslatedText\";\n\nexport enum EntityEventNotificationTriggerEnum {\n  OnCreate = \"OnCreate\",\n  OnUpdate = \"OnUpdate\",\n  OnAssigned = \"OnAssigned\", // This is for the first time the user is assigned to the entity\n  OnUpdateWhenAssigned = \"OnUpdateWhenAssigned\",\n}\n\nexport interface IEntityEventNotificationReadDto {\n  _id: string;\n  title: ITranslatedText[];\n  text: ITranslatedText[];\n  trigger: EntityEventNotificationTriggerEnum;\n}\n","export enum EntityStaticPermissionEnum {\n  Create = \"Create\",\n  Read = \"Read\",\n  Update = \"Update\",\n  Delete = \"Delete\",\n  ReadOwn = \"ReadOwn\",\n  UpdateOwn = \"UpdateOwn\",\n  DeleteOwn = \"DeleteOwn\",\n}\n","import { IMicroFrontendReadDto } from \"../microFontend/IMicroFrontendReadDto\";\n\nexport enum EventTriggerEnum {\n  OnCreate = \"OnCreate\",\n  OnUpdate = \"OnUpdate\",\n  OnClick = \"OnClick\",\n}\n\nexport enum EventTypeEnum {\n  ApiCall = \"ApiCall\",\n  Redirection = \"Redirection\",\n  MicroFrontendRedirection = \"MicroFrontendRedirection\",\n}\n\nexport interface IEventRequestHeaderReadDto {\n  key: string;\n  value: string;\n}\n\nexport interface IEventReadDto {\n  eventTrigger: EventTriggerEnum;\n  eventType: EventTypeEnum;\n\n  // Redirection options\n  redirectionUrl: string;\n  redirectionToSelf: boolean;\n\n  // API call options\n  requestMethod: string;\n  requestUrl: string;\n  requestDataIsCreatedEntity: boolean;\n  requestData: string;\n  requestHeaders: IEventRequestHeaderReadDto[];\n\n  // Microfrontend redirection\n  microFrontend?: IMicroFrontendReadDto | string;\n  microFrontendComponentId?: string;\n}\n","import { IEventReadDto } from \"../event/IEventReadDto\";\nimport { IFieldTableElementReadDto } from \"../fieldTableElement/IFieldTableElementReadDto\";\nimport { ITranslatedText } from \"../../globalTypes/ITranslatedText\";\nimport { IUserReadDto } from \"../user/IUserReadDto\";\n\nexport enum FieldTypeEnum {\n  Number = \"Number\",\n  Text = \"Text\",\n  Paragraph = \"Paragraph\",\n  File = \"File\",\n  Selector = \"Selector\",\n  Button = \"Button\",\n  Table = \"Table\",\n  IFrame = \"IFrame\",\n}\n\nexport interface IFieldOptionReadDto {\n  value: string;\n  label: ITranslatedText[];\n}\n\nexport interface IFieldReadDto {\n  _id: string;\n  name: ITranslatedText[];\n  type: FieldTypeEnum;\n  canChooseFromExistingFiles?: boolean;\n  options?: IFieldOptionReadDto[];\n  fieldEvents: IEventReadDto[];\n  tableOptions?: {\n    name?: ITranslatedText[];\n    columns: (IFieldTableElementReadDto | string)[];\n    rows: (IFieldTableElementReadDto | string)[];\n    yearTable: boolean;\n  };\n  owner?: IUserReadDto | string;\n\n  createdAt: string;\n  updatedAt: string;\n}\n","import { IFileReadDto } from \"../file/IFileReadDto\";\nimport { IReactionReadDto } from \"../reaction/IReactionReadDto\";\nimport { IUserReadDto } from \"../user/IUserReadDto\";\n\nexport enum ChatMessagesEnum {\n  Receive = \"ChatReceive\",\n  Delete = \"ChatDelete\",\n  ReaceiveReaction = \"ReaceiveReaction\",\n  SendTypingState = \"SendTypingState\",\n  ReceiveTypingState = \"SendTypingState\",\n  ReceiveLastMarkedMessageAsReadByUser = \"ReceiveLastMarkedMessageAsReadByUser\",\n}\n\nexport interface IMessageReadDto {\n  _id: string;\n  from: string;\n  to: string[];\n  message: string;\n  read: string[];\n  readAt?: string[];\n  files: (IFileReadDto | string)[];\n  totalUnreadMessages?: number;\n  reactions?: (IReactionReadDto | string)[];\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface IPopulatedMessageReadDto {\n  _id: string;\n  from: IUserReadDto;\n  to: IUserReadDto[];\n  message: string;\n  read: string[];\n  readAt?: string[];\n  files: IFileReadDto[];\n  totalUnreadMessages?: number;\n  reactions?: IReactionReadDto[];\n  createdAt: string;\n  updatedAt: string;\n}\n","import { ITranslatedText } from \"../../globalTypes/ITranslatedText\";\nimport { IEventReadDto } from \"../event/IEventReadDto\";\nimport { IFieldReadDto } from \"../field/IFieldReadDto\";\nimport { IModelStateReadDto } from \"../modelState/IModelStateReadDto\";\nimport { IUserReadDto } from \"../user/IUserReadDto\";\n\n//#region model fields\nexport interface IModelFieldReadDto {\n  field: IFieldReadDto | string;\n  required: boolean;\n  conditions?: IModelFieldConditionReadDto[];\n  states?: (IModelStateReadDto | string)[];\n  mainField?: boolean;\n  stickInTable?: boolean;\n  isVariation?: boolean;\n}\n\nexport interface IModelFieldConditionReadDto {\n  field?: IFieldReadDto | string;\n  conditionType: ModelFieldConditionTypeEnum;\n  value?: number | string;\n  modelState?: IModelStateReadDto | string;\n}\n\nexport enum ModelFieldConditionTypeEnum {\n  SuperiorTo = \"SuperiorTo\",\n  SuperiorOrEqualTo = \"SuperiorOrEqualTo\",\n  InferiorTo = \"InferiorTo\",\n  InferiorOrEqualTo = \"InferiorOrEqualTo\",\n  Equal = \"Equal\",\n  ValueInferiorOrEqualToCurrentYearPlusValueOfFieldAndSuperiorOrEqualToCurrentYear = \"ValueInferiorOrEqualToCurrentYearPlusValueOfFieldAndSuperiorOrEqualToCurrentYear\",\n  StateConditionsMet = \"StateConditionsMet\",\n  IfYearTableThenNumberOfYearsInTheFutureIsEqualToValueOfField = \"IfYearTableThenNumberOfYearsInTheFutureIsEqualToValueOfField\",\n}\n\n// Association with orders\nexport enum ModelOrderAssociationLevelEnum {\n  OrderLevel = \"OrderLevel\",\n  ProductLevel = \"ProductLevel\",\n}\nexport enum ModelOrderAssociationPermissionEnum {\n  ForSeller = \"ForSeller\",\n  ForBuyer = \"ForBuyer\",\n  ForBothSellerAndBuyer = \"ForBothSellerAndBuyer\",\n}\n\nexport interface IModelOrderAssociationConfig {\n  modelOrderAssociationPermission: ModelOrderAssociationPermissionEnum;\n  modelOrderAssociationLevel: ModelOrderAssociationLevelEnum;\n  isList: boolean;\n}\n\nexport enum ModelViewTypeEnum {\n  SectionView = \"SectionView\",\n  LinearView = \"LinearView\",\n}\n\nexport enum ModelSectionDirectionEnum {\n  Horizontal = \"Horizontal\",\n  Vertical = \"Vertical\",\n}\n\nexport interface IModelSection {\n  direction: ModelSectionDirectionEnum;\n  children: IModelSection[];\n  uuid: string;\n  customData?: { fieldId: string };\n}\n\nexport interface IModelReadDto {\n  _id: string;\n  name: ITranslatedText[];\n  modelFields: IModelFieldReadDto[];\n  modelEvents?: IEventReadDto[];\n  states?: (IModelStateReadDto | string)[];\n  subStates?: (IModelStateReadDto | string)[];\n\n  isForSale?: boolean;\n  quantityField?: IFieldReadDto | string;\n  priceField?: IFieldReadDto | string;\n  imageField?: IFieldReadDto | string;\n  showInSideMenu?: boolean;\n\n  isForOrders?: boolean;\n  orderAssociationConfig?: IModelOrderAssociationConfig;\n\n  owner?: IUserReadDto | string;\n  viewType?: ModelViewTypeEnum;\n  sections: IModelSection[];\n\n  createdAt: string;\n  updatedAt: string;\n}\n","import { ITranslatedText } from \"../../globalTypes/ITranslatedText\";\n\nexport enum ModelStateTypeEnum {\n  ParentState = \"ParentState\",\n  SubState = \"SubState\",\n}\n\nexport interface IModelStateReadDto {\n  _id: string;\n  name: ITranslatedText[];\n  stateType: ModelStateTypeEnum;\n  exlusive?: boolean;\n}\n","import { ITranslatedText } from \"../../globalTypes/ITranslatedText\";\nimport { IFileReadDto } from \"../file/IFileReadDto\";\nimport { IUserReadDto } from \"../user/IUserReadDto\";\n\nexport enum PostVisibilityEnum {\n  Private = \"Private\",\n  Public = \"Public\",\n  Connections = \"Connections\",\n}\n\nexport enum PostDesignEnum {\n  Default = \"Default\",\n  Spacing = \"Spacing\",\n  Card = \"Card\",\n  fullWidthPicture = \"FullWidthPicture\",\n  TitleAndText = \"TitleAndText\",\n  Banner = \"Banner\",\n  TitleImageAndText = \"TitleImageAndText\",\n  ChildrenContainer = \"ChildrenContainer\",\n  RotatingCarzd = \"RotatingCard\",\n  AnimatedTitle = \"AnimatedTitle\",\n  UnderlinedTitle = \"UnderinedTitle\",\n  Footer = \"Footer\",\n  ContactForm = \"ContactForm\",\n  Person = \"Person\",\n  Card2 = \"Card2\",\n  Video = \"Video\",\n  ModelForm = \"ModelForm\",\n  ModelList = \"ModelList\",\n}\n\nexport interface IPostReadDto {\n  _id: string;\n  title?: ITranslatedText[];\n  subTitle?: ITranslatedText[];\n  poster: IUserReadDto | string;\n  content?: ITranslatedText[];\n  files: (IFileReadDto | string)[];\n  visibility: PostVisibilityEnum;\n  design: PostDesignEnum;\n  children: (IPostReadDto | string)[];\n  code?: string;\n\n  createdAt: string;\n  updatedAt: string;\n}\n","import { IUserReadDto } from \"../user/IUserReadDto\";\n\nexport enum ReactionEnum {\n  Love = \"Love\",\n  Laugh = \"Laugh\",\n  Shock = \"Shock\",\n  Cry = \"Cry\",\n  Angry = \"Angry\",\n  OK = \"OK\",\n}\n\nexport interface IReactionReadDto {\n  _id: string;\n  user: IUserReadDto | string;\n  reaction: ReactionEnum;\n\n  createdAt: string;\n  updatedAt: string;\n}\n","export enum PermissionEnum {\n  EditConfiguration = \"EditConfiguration\",\n\n  CreatePage = \"CreatePage\",\n  ReadPage = \"ReadPage\",\n  UpdatePage = \"UpdatePage\",\n  DeletePage = \"DeletePage\",\n\n  CreatePost = \"CreatePost\",\n\n  CreateField = \"CreateField\",\n  ReadField = \"ReadField\",\n  UpdateField = \"UpdateField\",\n  DeleteField = \"DeleteField\",\n  ReadOwnField = \"ReadOwnField\",\n  UpdateOwnField = \"UpdateOwnField\",\n  DeleteOwnField = \"DeleteOwnField\",\n\n  CreateModel = \"CreateModel\",\n  ReadModel = \"ReadModel\",\n  UpdateModel = \"UpdateModel\",\n  DeleteModel = \"DeleteModel\",\n  ReadOwnModel = \"ReadOwnModel\",\n  UpdateOwnModel = \"UpdateOwnModel\",\n  DeleteOwnModel = \"DeleteOwnModel\",\n\n  CreateUser = \"CreateUser\",\n  ReadUser = \"ReadUser\",\n  UpdateUser = \"UpdateUser\",\n  DeleteUser = \"DeleteUser\",\n\n  CreateRole = \"CreateRole\",\n  ReadRole = \"ReadRole\",\n  UpdateRole = \"UpdateRole\",\n  DeleteRole = \"DeleteRole\",\n\n  CreateMicroFrontend = \"CreateMicroFrontend\",\n  ReadMicroFrontend = \"ReadMicroFrontend\",\n  UpdateMicroFrontend = \"UpdateMicroFrontend\",\n  DeleteMicroFrontend = \"DeleteMicroFrontend\",\n\n  CreatePaymentMethod = \"CreatePaymentMethod\",\n  ReadPaymentMethod = \"ReadPaymentMethod\",\n  UpdatePaymentMethod = \"UpdatePaymentMethod\",\n  DeletePaymentMethod = \"DeletePaymentMethod\",\n\n  CreateShippingMethod = \"CreateShippingMethod\",\n  ReadShippingMethod = \"ReadShippingMethod\",\n  UpdateShippingMethod = \"UpdateShippingMethod\",\n  DeleteShippingMethod = \"DeleteShippingMethod\",\n\n  CreateAddress = \"CreateAddress\",\n  ReadAddress = \"ReadAddress\",\n  UpdateAddress = \"UpdateAddress\",\n  DeleteAddress = \"DeleteAddress\",\n}\n","import { IAddressReadDto } from \"../address/IAddressReadDto\";\nimport { IFileReadDto } from \"../file/IFileReadDto\";\nimport { IMessageReadDto } from \"../message/IMessageReadDto\";\nimport { IRoleReadDto } from \"../role/IRoleReadDto\";\n\nexport enum SuperRoleEnum {\n  SuperAdmin = \"SuperAdmin\",\n  Normal = \"Normal\",\n}\n\nexport interface IUserReadDto {\n  _id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  profilePicture?: IFileReadDto | string;\n  superRole: SuperRoleEnum;\n  role?: IRoleReadDto | string;\n  hasMessagingEmailsActivated?: boolean;\n}\n\nexport interface IUserReadDtoWithLastReadMessageInConversationReadDto\n  extends IUserReadDto {\n  to: string[];\n  lastReadMessageInConversation: IMessageReadDto | null;\n}\n","// IMPORTANT!!! => These need to be ordered. They are used in the frontend as a reference for status tracking in an ordered way\nexport enum OrderPaymentStatusEnum {\n  Pending = \"Pending\",\n  Paid = \"Paid\",\n}\n\nexport default OrderPaymentStatusEnum;\n","export enum OrderPaymentMethodEnum {\n  Card = \"card\",\n  BankTransfer = \"ach_credit_transfer\",\n  Ideal = \"ideal\",\n  Alipay = \"alipay\",\n  Bancontact = \"bancontact\",\n  Eps = \"eps\",\n  giropay = \"giropay\",\n  klarna = \"klarna\",\n  multibanco = \"multibanco\",\n  sepa_debit = \"sepa_debit\",\n  sofort = \"sofort\",\n  wechat_pay = \"wechat_pay\",\n  p24 = \"p24\",\n  paypal = \"paypal\",\n  afterpay_clearpay = \"afterpay_clearpay\",\n}\n","import { ITranslatedText } from \"../../globalTypes/ITranslatedText\";\nimport { IFileReadDto } from \"../file/IFileReadDto\";\nimport { IUserReadDto } from \"../user/IUserReadDto\";\n\nexport enum NotificationMessageEnum {\n  Receive = \"NotificationReceive\",\n}\n\nexport interface INotificationReadDto {\n  _id: string;\n  text: ITranslatedText[];\n  link: string;\n  image?: IFileReadDto | string;\n  to: (IUserReadDto | string)[];\n  clickedBy: (IUserReadDto | string)[];\n\n  createdAt: string;\n  updatedAt: string;\n}\n"],"names":["EntityEventNotificationTriggerEnum","EntityStaticPermissionEnum","EventTriggerEnum","EventTypeEnum","FieldTypeEnum","ChatMessagesEnum","ModelFieldConditionTypeEnum","ModelOrderAssociationLevelEnum","ModelOrderAssociationPermissionEnum","ModelViewTypeEnum","ModelSectionDirectionEnum","ModelStateTypeEnum","PostVisibilityEnum","PostDesignEnum","ReactionEnum","PermissionEnum","SuperRoleEnum","OrderPaymentStatusEnum","OrderPaymentMethodEnum","NotificationMessageEnum"],"mappings":"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"}